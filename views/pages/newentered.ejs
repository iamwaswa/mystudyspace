<% include ../partials/header %>
  <link type='text/css' rel='stylesheet' href='/stylesheets/pages/newcurrent.css'>
</head>
<body>
  <main>
    <nav>
      <a 
        href='/'
      >
        MyStudySpace
      </a>
      <section>
        <form
          id='form'
          action='/studyspaces'
          method='POST'
        >
          <input 
            id='input'
            type='text' 
            placeholder='Search here...' 
            name='place' 
          />
          <input 
            type='submit' 
            value='Search' 
          />
        </form>
      </section>
    </nav>
    <section
      class='map-display'
    >
    </section>
    <section
      class='info'
    >
      <p>
        The map shows studyspaces near you. You can also search for a place you know in the search field above.
      </p>
    </section>
  </main>
  <script>
    const latitude = `<%= lat %>`;
    const longitude = `<%= lng %>`;
    const zoomLevel = 12;
    const radiusSize = 100;
    const content = {
      userPosition: ``,
      userMarker: ``,
      map: ``,
    };

    const removeCountryAndPostFromAddress = (address) => {
      const addressArray = address.split(``);
      const countryStartIndex = addressArray.lastIndexOf(`,`);
      const addressWithoutCountry = addressArray.slice(0, countryStartIndex);
      const postalCodeStartIndex = addressWithoutCountry.lastIndexOf(`,`);
      return addressWithoutCountry.slice(0, postalCodeStartIndex);
    };

    const addLineBreaksToAddress = (address) => {
      return removeCountryAndPostFromAddress(address)
        .map((character) => {
          if (character === `,`) {
            return `</br>`;
          } else {
            return character;
          }
        })
        .join(``);
    };

    const initResultsDisplay = (results) => {
      results.forEach((result) => {
        const { formatted_address, geometry, icon, name, place_id } = result;

        const formattedAddress = addLineBreaksToAddress(formatted_address);

        const resultMarker = new google.maps.Marker({
          position: geometry.location,
          map: content.map,
          animation: google.maps.Animation.DROP,
          icon: {
            url: icon,
            scaledSize: new google.maps.Size(20, 20),
          }
        });

        const formContent = `<form class='info-window' action='/studyspaces' method='POST'><input type='text' name='placeId' value='${place_id}'/><input type='submit' value='Add StudySpace'/></form>`
        const infoWindow = new google.maps.InfoWindow({
          content: `<strong>${name}</strong></br></br>${formattedAddress}</br></br>${formContent}`,
        });

        resultMarker.addListener(`click`, () => {
          infoWindow.open(content.map, resultMarker);
          resultMarker.setAnimation(google.maps.Animation.BOUNCE);
        });

        infoWindow.addListener(`closeclick`, () => {
          resultMarker.setAnimation(null);
        });
      });
    };

    const initPlacesSearch = () => {
      const places = [`public library`, `coffee shop`];

      places.forEach((place) => {
        const request = {
          query: place,
          location: content.userPosition,
          radius: radiusSize,
        };

        const textSearchService = new google.maps.places.PlacesService(content.map);
        textSearchService.textSearch(request, (results, status) => {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            initResultsDisplay(results);
          } else {
            console.error(`The search failed with status: ${status}`);
          }
        });
      });
    };

    const initMyMarker = () => {
      content.userMarker = new google.maps.Marker({
        position: content.userPosition,
        map: content.map,
        animation: google.maps.Animation.DROP,
      });

      const myInfoWindow = new google.maps.InfoWindow({
        content: `This is your location`,
      });

      content.userMarker.addListener(`click`, () => {
        myInfoWindow.open(content.map, content.userMarker);
      });

      initPlacesSearch();
    };

    const initMap = () => {
      content.map = new google.maps.Map(document.getElementsByClassName(`map-display`)[0], {
        center: content.userPosition,
        zoom: zoomLevel,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      });

      initMyMarker();
    };

    function assignUserPosition() {
      content.userPosition = {
        lat: Number(latitude),
        lng: Number(longitude),
      };

      initMap();
    };
  </script>
  <script 
    async 
    defer 
    src='https://maps.googleapis.com/maps/api/js?key=<%=process.env.GOOGLE_MAPS_API_KEY%>&libraries=places&callback=assignUserPosition'
  >
  </script>
</body>
</html>